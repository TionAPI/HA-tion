# Make new release based on conventional commits
name: Create release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  changes:
    name: "Create changelog and tag"
    runs-on: ubuntu-latest
    outputs:
      skipped: ${{ steps.changelog.outputs.skipped }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
      tag: ${{ steps.changelog.outputs.tag }}

    steps:
    - name: checkout
      uses: actions/checkout@v2
      id: checkout

    - name: Conventional Changelog Action
      id: changelog
      uses: TriPSs/conventional-changelog-action@v3
      with:
        github-token: ${{ secrets.github_token }}
        output-file: "false"
        skip-version-file:   "true"
        skip-commit: "true"
  version:
    name: "Update version"
    needs: changes
    if: ${{ needs.changes.outputs.skipped == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v2

      - name: "Prepare"
        run: |
          echo "NEW_VERSION=${{ needs.changes.outputs.tag }}" | sed -e 's/=v/=/' >> $GITHUB_ENV
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions@no_spam.please"
      - name: Update version file
        id: update
        run: sed -e "s/%%%VERSION%%%/${{ env.NEW_VERSION }}/" ./custom_components/tion/manifest.json.tpl >custom_components/tion/manifest.json

      - name: Commit
        id: commit
        run: |
          git commit -m "ci(manifest): version update to ${{ env.NEW_VERSION }}" custom_components/tion/manifest.json          
          git push origin master
          git tag -f -a v${{ env.NEW_VERSION }}
          git push -f --tags
  release:
    name: "Create release"
    needs: [ changes, version ]
    if: ${{ needs.changes.outputs.skipped == 'false' }}
    runs-on: ubuntu-latest

    steps:      
    - name: Create Release
      id: release
      uses: actions/create-release@v1      
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        tag_name: ${{ needs.changes.outputs.tag }}
        release_name: ${{ needs.changes.outputs.tag }}
        body: ${{ needs.changes.outputs.clean_changelog }}
 
  create_post:
    runs-on: ubuntu-latest
    needs: changes
    name: "patreon post"
    if: ${{ needs.changes.outputs.skipped == 'false' }}
    steps:
      - name: post
        uses: IATkachenko/patreon-post@main
        with:
          login: ${{ secrets.PATREON_USER }}
          password: ${{ secrets.PATREON_PASSWORD }}
          body: ${{ needs.changes.outputs.clean_changelog }}
        env:
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
          PATREON_DEVICE_ID: ${{ secrets.PATREON_DEVICE_ID }}
